function doPost(e) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Power Level Results');
  const data = JSON.parse(e.postData.contents);
  const { cardName, powerLevel, token } = data;

  // Verify hCaptcha token
  const url = `https://hcaptcha.com/siteverify`;
  const payload = {
    secret: "ES_84d37d72e51d47188d20570f5256be78", // Your hCaptcha secret key
    response: token, // The hCaptcha token from the frontend
  };

  const options = {
    method: "POST",
    payload: payload,
  };

  const response = UrlFetchApp.fetch(url, options);
  const result = JSON.parse(response.getContentText());

  if (!result.success) {
    return ContentService.createTextOutput(JSON.stringify({ success: false, error: "CAPTCHA verification failed" }))
      .setMimeType(ContentService.MimeType.JSON);
  }

  try {
    // Find the row for the card
    const rows = sheet.getDataRange().getValues();
    let cardRowIndex = -1;

    for (let i = 0; i < rows.length; i++) {
      if (rows[i][0] === cardName) {
        cardRowIndex = i + 1; // Rows are 1-indexed in Google Sheets
        break;
      }
    }

    if (cardRowIndex === -1) {
      // If the card doesn't exist, add a new row
      sheet.appendRow([cardName, 0, 0, 0, 0]); // Initialize vote counts to 0
      cardRowIndex = sheet.getLastRow(); // Get the row index of the newly added row
    }

    // Update the vote count for the selected power level
    if (powerLevel >= 1 && powerLevel <= 4) {
      const voteColumn = powerLevel + 1; // Columns are 1-indexed (Power Level 1 = Column 2, etc.)
      const currentVotes = sheet.getRange(cardRowIndex, voteColumn).getValue();
      sheet.getRange(cardRowIndex, voteColumn).setValue(currentVotes + 1);
    }

    // Return a success response
    return ContentService.createTextOutput(JSON.stringify({ success: true }))
      .setMimeType(ContentService.MimeType.JSON);
  } catch (error) {
    // Return an error response
    return ContentService.createTextOutput(JSON.stringify({ success: false, error: error.message }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}
